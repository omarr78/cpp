int mod(string s,int n)
{
    int r=0;
    for(int i=0;i<s.length();i++)
    {
        r=r*10+(s[i]-'0');
        r=r%n;
    }
    return r;
}
bool printbt(ll n,ll bt)    //print value of bit x  ,, return bool  (0,1)
{
    return (n>>bt)&1;
}
int changBtTo1(ll n,ll bt)  //change bit x to 1
{
    return n|(1<<bt);
}
int changBtTo0(ll n,ll bt)  //change bit x to 0
{
    return n& ~(1<<bt);
}


int changBtTo0(ll n,ll bt)  //change bit x to 0
{
    return n^(1<<bt);
}
ll flip(ll n,ll bt)   // flip bit x  
{
    return n^(1<<bt);
}
int turnOnLastZero(int n)
{
    return n|(n+1);
}
int turnOffLastOne(int n)
{
    return n&(n-1);
}
int turnOnFLastConsecutiveZeroes(int n)   // change all bits from (index 0 until first                  
{                                                                        //   bit equal to 1 ) to 1
    return n|(n-1);
}
int turnOffLastConsecutiveOnes(int n)  //   change all bits from (index 0 until first
{                                                                     // equal to 0)  to 0
    return n&(n+1);
}
bool isPowerOfTwo(int n)   // check if n is power of two or not 
{                                                //    n must be greater than zero 
    return (n&(n-1))==0;
}
bool check_bit(int n,int bt)  
{
    return (n&(1ll<<bt));
}
int cntBits(int mask)   // O(bits length)
{
    int cnt=0;
    while(mask)
    {
        if(mask&1)cnt++;
        mask>>=1;
    }
    return cnt;
}
cout<<__builtin_popcount(n);      // count number of ones

cout<<__builtin_popcountll(n);




ll countAllBits(ll n)  
{
    int cnt=0;
    while(n)
    {
        cnt++; n>>=1;
    }
    return cnt;
}
ll cntallbits(ll n)
{
    return log2(n)+1;
}



Prime factorization
vector<int>a; int n;cin>>n;
 for(int i = 2;i*i<=n;i++) {
        while(n%i==0)
        {
            a.push_back(i);
            n/=i;
        }
 } if(n!=1)a.push_back(n);
   for(int i:a)cout<<i<<" ";
   




String = ‘accd’  -> ‘ac’ , ‘cd’
int sum = 0,mx = 0;
for(auto &i:f){
    sum+=i;
    mx =max(mx,i);
}
cout<<max(mx,(sum+1)/2);

or

multiset<int>st;
for (int i = 0; i < 26; ++i) {
    if(f[i])st.insert(f[i]);
}
int ans = 0;
while (st.size() > 1){
    int mn = *st.begin();
    int mx = *st.rbegin();
    st.erase(st.find(mn));
    st.erase(st.find(mx));
    ans++;

    if(mx - 1)st.insert(mx - 1);
    if(mn - 1)st.insert(mn - 1);
}
if(!st.empty())ans += *st.begin();
cout << ans << endl;







•  struct segTree{
•      vector<int>seg;
•      int sz;
•   
•      void build(int ind,int lo,int hi,int n,vector<int>&a){
•          if(hi-lo == 1)
•          {
•              seg[ind] = ( lo < n ? a[lo] : INT_MAX);
•              return;
•          }
•          int mid = (lo + hi)/2;
•          build(2*ind+1,lo,mid,n,a);
•          build(2*ind+2,mid,hi,n,a);
•          seg[ind] = seg[2*ind+1] & seg[2*ind+2];
•      }
•   
•      segTree(int n,vector<int> &a)
•      {
•              sz = 1 ;
•              while (sz < n)sz *= 2;
•              seg = vector<int>(sz*2);
•              build(0,0,sz,n,a);
•      }
•      int query(int ind,int low,int high,int l,int r)
•      {
•          if(low >= l && r >= high)return seg[ind];
•          if(l>=high || low >= r)return INT_MAX;
•          int mid = (low + high) /2;
•          int left = query(2*ind+1,low,mid,l,r);
•          int right = query(2*ind+2,mid,high,l,r);
•          return (left&right);
•      }
•      int get(int l,int r)
•      {
•          return query(0,0,sz,l-1,r);
•      }
•   
•  };
•   
•   





•  void out() {
•      int n;cin>>n;
•      vector<int>a(n);
•      for (int i = 0; i < n; ++i) {
•          cin>>a[i];
•      }
•      segTree sol(n,a);
•   
•      int q;cin>>q;
•      while(q--) {
•          int start, k;
•          cin >> start >> k;
•          int l = start,r = n;
•          int ans = -1;
•          while(r>=l)
•          {
•              int mid = (l+r)/2;
•              int x = sol.get(start,mid);
•              if(x>=k)
•              {
•                  l = mid+1;
•                  ans = mid;
•              }
•              else{
•                  r = mid-1;
•              }
•          }
•          cout <<ans<<" ";
•      }
•   
•  }




int find_first_less_than(int x){
    int l = 0,r = m-1;
    int ans = -1;
    while(r>=l){
        int m = l + (r-l) / 2;
        if(b[m] <= x){
            ans = m;
            l = m+1;
        }
        else{
            r = m-1;
        }
    }
    return ans;
}




int find_first_greater_than(int x){
    int l = 0,r = m-1;
    int ans = -1;
    while(r>=l){
        int m = l + (r-l) / 2;
        if(b[m] >= x){
            ans = m;
            r = m-1;
        }
        else{
            l = m+1;
        }
    }
    return ans;
}


Sieve n*log(log(n))

vector<bool>primes(1e6+5,1);
    int siz = 1e6;
    primes[0] = 0;
    primes[1] = 0;
    for (int i = 2; i*i <= siz ; ++i) {
        if(primes[i])
        {
            for (int j = i*i; j <= siz; j+=i) {
                primes[j] = 0;
            }
        }
    }
    for (int i = 0; i < 30; ++i) {
        cout<<i<<" " << primes[i]<<"\n";
    }


- To find Lexicographically largest sub-sequence of the given string
traverse the string from left to right 
  take the leftmost largest character for remaining suffix
string "adcdab"   select d
string "cdab"   select d
string "ab"  select b
so the ans will be "ddb"

   string max_substring(string s){
    int n = s.size();
    vector<char> large(n);
    vector<int> idx(n);
    char mx = '0';
    int j = n + 5;
    for (int i = n - 1; i >= 0; --i) {
        if (s[i] >= mx) {
            mx = s[i];
            j = i;
        }
        large[i] = mx;
        idx[i] = j;
    }
    int pointer = 0;
    string ans = "";
    while (pointer < n)
    {
        ans.push_back(large[pointer]);
        pointer = idx[pointer]+1;
    }
    return ans;
}


- if you have a target sum of two number and you want to return the index of two sum that is equal target sum

    vector<int> twoSum(vector<int>& nums, int target)
    {
        map<int, int> mp;
        for (int i = 0; i < nums.size(); i++)
        {
            int t = target - nums[i];
            if (mp.find(t) != mp.end())
            {
                return {mp[t], i};
            }
            else {
                mp[nums[i]] = i;
            }
        }

        // Return an empty vector if no solution is found
        return {};
    }




--  You are given an array of integers. Your task is to create pairs of them, such that every created pair has the same sum.
This sum is NOT specified, but the number of created pairs should be the maximum possible. Each array element may belong to one pair only.


here is a code

void out() {

    int n;cin>>n;
    vector<int>a(n);
    set<int>st;
    for (int i = 0; i < n; ++i) {
        cin>>a[i];
        st.insert(a[i]);
        f[a[i]]++;
    }
    vector<int>temp;
    for(auto i:st){
        temp.push_back(i);
    }
    int mx = 0;
    int less = *min_element(a.begin(),a.end());
    int great = *max_element(a.begin(),a.end());
    for(int sum= 2*less;sum<= 2 * great;sum++)
    {
        int pair = 0;
        for(int i=0;i<temp.size();i++)
        {
            if(temp[i] >= ((sum+1)/2))break;
            int x = sum - temp[i];
            pair += min(f[temp[i]],f[x]);
        }
        if(sum % 2 == 0){
            pair+= f[sum/2]/2;
        }
        mx = max(mx,pair);
    }
    cout<<mx;
}





---- if you have query each query will give you a from L to R range and L and R up to 1e9
    then we 
    1- save it in map
    2- copy it in a pair array
    3- prefix sum array in the second pair
    4- find the first number less than or equal to R with binary search
    5- find the first number less than or equal to L-1 

    here is the code 

    for(int i = 1 ;i<a.size();i++)
    {
        a[i].second += a[i-1].second;
    }
    while(q--){
        int l,r;cin>>l>>r;
        int ret1 = -1,ret2 = -1;
        ret1 = find_first_less_than(r);
        ret2 = find_first_less_than(l-1);
        if(ret1 != -1 && ret2!=-1){
            cout<<a[ret1].second - a[ret2].second;
        }
        else if(ret2 == -1)cout<<a[ret1].second;
        else if(ret1 == -1)cout<<0;
        cout<<"\n";
    }



 -- if you have a number of summation and want to get the n 

void out() {
    int n;cin>>n; // n is summation
    cout<< (int)(-1 + (sqrt(1-4*(-n*2))))/ 2;
}




-- you have an array and you want to the sum of the multiplication of each two consecutive elements in the final array is as minimal as possible.
   ,, summation of ai * ai+1 is minimal and print this array 

here is the code ...

void out()
{
    int n;cin>>n;
    vector<int>a(n);
    for (int i = 0; i < n; ++i) {
        cin>>a[i];
    }
    std::sort(a.begin(), a.end());
    vector<int>ans(n);
    int start = 0 ,i = 0,j =n-1, end = n-1;
    bool ch = 0;
    while(end >= start){
        if(!ch){
            ans[start] = a[j];  start++;  j--;
            if(end < start)break;
            ans[end] = a[j];  end--; j--;
            ch = !ch;
        }
        else{
            ans[start] = a[i]; i++; start++;
            if(end < start)break;
            ans[end] = a[i]; end--; i++;
            ch = !ch;
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<ans[i]<<" ";
    }
}


-- to get xor to specific range  L,R in O(1)

    // prefix xor
    for (int i = 1; i < n; ++i) {
        a[i] ^= a[i-1];
    }
    // and the  result = ((R) xor (L-1)) 
    int l,r;cin>>l>>r;
    l--,r--; // if L and R are 1-based index
    int res;
    if(l == 0){
        res = a[r];
    }
    else{
        res = a[l-1] ^ a[r];
    }

-- is the number is perfect square 

    bool isPerfectSquare(long double x)
    {
        if (x >= 0) {
            long long sr = sqrt(x);
            return (sr * sr == x);
        }
        return false;
    }
