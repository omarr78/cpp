#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>


    ordered_set st;
    st.insert(1);  // index 0
    st.insert(2);  // index 1
    st.insert(4);  // index 2
    st.insert(8);  // index 3
    st.insert(16); // index 4
    
    -- find_by_order --> when you have the index and you want to access this index
    
    cout<<*st.find_by_order(1);  // 2

    
    -- order_of_key --> when you have x and want to know its index or no. of element smaller than x
 
    cout<<st.order_of_key(-5)<<endl;  // 0
    cout<<st.order_of_key(1)<<endl;   // 0


    -- if you want to know the no. of element that is bigger than or equal x

    cout<<st.size() - idx;
    
    -- if you want to know the no. of element that is bigger than x

      int x = 16;
      int idx = st.order_of_key(x);
      if(*st.find_by_order(idx) == x){
          cout<<X.size() - idx -1;
      }
      else{
          cout<<st.size() - idx;
      }


    -- to prevent that the set is unique here is an example 

    #define ordered_set tree<pair<int, int>, null_type, less_equal<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update>

    ordered_set st;
    int inc = 0; // second pair
    int cnt = 0;
    for (int i = 0; i < n; ++i) {
        int dif = b[i] - a[i];
        if(!st.empty()){
            int idx = st.order_of_key({dif,1e9});
            cnt+= st.size() - idx;
        }
        dif = a[i] - b[i];
        st.insert({dif,inc++});
    }


    
